apiVersion: v1
kind: ConfigMap
metadata: 
  name: mongodb-conf-configmap
  namespace: {{ .Values.global.defaultNamespace }}
immutable: false
data:
  root_username: rootuser
  services_username: servicesuser
  mongodb.conf: |
    storage:
      dbPath: /data/db
    replication:
      replSetName: {{ .Values.replSetName }}
    # security:
    #   authorization: disabled
    #   keyFile: /etc/mongodb-keyfile/key
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: repset-init-configmap
  namespace: {{ .Values.global.defaultNamespace }}
data:
  # replSetInit.sh: |
  #   #!/bin/bash
  #   mongo --host mongo-0.mongo.domivice-dev.svc.cluster.local:27017 <<EOF
  #   rs.initiate({
  #     _id: "rs0",
  #     members: [
  #       { _id: 0, host : "mongo-0.mongo.domivice-dev.svc.cluster.local:27017" },
  #       { _id: 1, host : "mongo-1.mongo.domivice-dev.svc.cluster.local:27017" },
  #       { _id: 2, host : "mongo-2.mongo.domivice-dev.svc.cluster.local:27017" }
  #     ]
  #   });
  #   EOF
  replSetInit.sh: |
    #!/bin/bash
    CONFIG="rs.initiate({ _id: \"{{ .Values.replSetName }}\", members: ["
    for ((i=0; i<{{ .Values.replicaCount }}; i++)); do
      CONFIG+=" { _id: $i, host: \"mongo-$i.{{ .Values.serviceName }}.{{ .Values.global.defaultNamespace }}.svc.cluster.local:{{ .Values.mongoPort }}\" },"
    done
    CONFIG="${CONFIG%,}"  # Remove trailing comma
    CONFIG+=" ]});"

    FIRST_HOST="mongo-0.{{ .Values.serviceName }}.{{ .Values.global.defaultNamespace }}.svc.cluster.local:{{ .Values.mongoPort }}"
        
    # Execute the rs.initiate command on the first host
    mongosh --host $FIRST_HOST --eval "$CONFIG" --quiet

    # Get the primary host from the first host
    PRIMARY_HOST=$(mongosh --host $FIRST_HOST --eval "rs.isMaster().primary" --quiet | tr -d '"')

    #echo "Primary host: $PRIMARY_HOST"

    # Read the MongoDB init script from file
    MONGO_INIT=$(cat /docker-entrypoint-initdb.d/mongo-init.js)

    #echo "Mongo init script: $MONGO_INIT"

    # Execute the MongoDB init script on the primary host
    mongosh admin --host $PRIMARY_HOST --eval "$MONGO_INIT"

---
apiVersion: v1
kind: ConfigMap
metadata: 
  name: readiness-probe-configmap
  namespace: {{ .Values.global.defaultNamespace }}
data:
  readiness.sh: |
    #!/bin/bash
    # Check MongoDB's status
    bin/mongosh --eval "db.adminCommand('ping')" >/dev/null 2>&1
    # Check the exit status of the mongo command
    if [ $? -eq 0 ]; then
      exit 0 # MongoDB is up and running
    else
      exit 1 # MongoDB is not running
    fi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-init-configmap
  namespace: {{ .Values.global.defaultNamespace }}
data:
  mongo-init.js: |
    const rootUserName = process.env.MONGO_INITDB_ROOT_USERNAME;
    const rootPassword = process.env.MONGO_INITDB_ROOT_PASSWORD;    
    
    db.createUser({
      user: rootUserName,
      pwd: rootPassword,
      roles: [
        { role: "root", db: "admin" }
      ]
    });

    const servicesUserName = process.env.DOMIVICE_SERVICES_USERNAME;
    const servicesPassword = process.env.DOMIVICE_SERVICES_PASSWORD;    
    
    db.createUser({
      user: servicesUserName,
      pwd: servicesPassword,
      roles: [
        { role: "readWrite", db: "{{ .Values.initDatabase }}" }
      ]
    });    

