apiVersion: v1
kind: ConfigMap
metadata: 
  name: mongodb-conf-configmap
  namespace: {{ .Values.global.defaultNamespace }}
immutable: false
data:
  root_username: rootuser
  services_username: servicesuser
  mongodb.conf: |
    storage:
      dbPath: /data/db
    replication:
      replSetName: {{ .Values.replSetName }}
  auth.mongodb.conf: |
    storage:
      dbPath: /data/db
    replication:
      replSetName: {{ .Values.replSetName }}
    security:
      authorization: disabled
      keyFile: /etc/mongodb-keyfile/key    
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-init-configmap
  namespace: {{ .Values.global.defaultNamespace }}
data:
  mongoInit.sh: |
    #!/bin/bash
    rs_init_command(){
      local command="rs.initiate({ _id: \"{{ .Values.replSetName }}\", members: ["
      for ((i=0; i<{{ .Values.replicaCount }}; i++)); do
        command+=" { _id: $i, host: \"mongo-$i.{{ .Values.serviceName }}.{{ .Values.global.defaultNamespace }}.svc.cluster.local:{{ .Values.mongoPort }}\" },"
      done
      command="${command%,}"  # Remove trailing comma
      command+=" ]});"
      echo "$command"
    }
    ensure_hosts_are_running(){
      for ((i=0; i<{{ .Values.replicaCount }}; i++)); do
        local host="mongo-$i.{{ .Values.serviceName }}.{{ .Values.global.defaultNamespace }}.svc.cluster.local:{{ .Values.mongoPort }}"
        until mongosh --host $host --quiet --eval "db" &>/dev/null; do
          echo "Waiting for $host to start..."
          sleep 2
        done
        echo "$host is running..."
      done

    }
    run_rs_init_command(){
      local host=$1
      local command=$2

      echo "Running the rs.initiate command on $host..."
      mongosh --host $host --eval "$command" --quiet
      echo "Replica set initialized."

      until mongosh --host $host --quiet --eval "print(rs.status().ok)" | grep -q "1"; do
        echo "Waiting for primary host to be elected..."
        sleep 2
      done
      echo "Primary host elected."
    }
    create_users_command(){
      local command=$(cat <<EOF
        db.createUser({
          user: "$MONGO_INITDB_ROOT_USERNAME",
          pwd: "$MONGO_INITDB_ROOT_PASSWORD",
          roles: [
            { role: "root", db: "admin" }
          ]
        });
        db.createUser({
          user: "$DOMIVICE_SERVICES_USERNAME",
          pwd: "$DOMIVICE_SERVICES_PASSWORD",
          roles: [
            { role: "readWrite", db: "$MONGO_INITDB_DATABASE" }
          ]
        }); 
    EOF
      )
      echo "$command"
    }
    run_create_users_command(){
      local host=$1
      local command=$2

      echo "Running the db.createUser command on $host..."
      mongosh admin --host $host --eval "$command" --quiet
      echo "Users created"
    }

    FIRST_HOST="mongo-0.{{ .Values.serviceName }}.{{ .Values.global.defaultNamespace }}.svc.cluster.local:{{ .Values.mongoPort }}"
    ensure_hosts_are_running

    RS_INIT_COMMAND=$(rs_init_command)
    run_rs_init_command "$FIRST_HOST" "$RS_INIT_COMMAND"

    PRIMARY_HOST=$(mongosh --host $FIRST_HOST --eval "rs.isMaster().primary" --quiet | tr -d '"')
    CREATE_USERS_COMMAND=$(create_users_command)
    run_create_users_command "$PRIMARY_HOST" "$CREATE_USERS_COMMAND"
